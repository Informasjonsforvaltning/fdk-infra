---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: flux-system
spec:
  interval: 5m
  targetNamespace: monitoring
  chart:
    spec:
      version: 55.x
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
      interval: 60m
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  valuesFrom:
    - kind: Secret
      name: kube-prometheus-stack-alertmanager
      targetPath: alertmanager.config.global.slack_api_url
      valuesKey: slack-apiurl
    - kind: Secret
      name: kube-prometheus-stack-grafana
      targetPath: grafana.adminPassword
      valuesKey: password
  values:
    coreDns:
      enabled: false
    kubeDns:
      enabled: true
    defaultRules:
      rules:
        kubeControllerManager: false
        kubeProxy: false
        kubeScheduler: false
    alertmanager:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      service:
        type: NodePort
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
          nginx.ingress.kubernetes.io/auth-type: basic
          nginx.ingress.kubernetes.io/auth-secret: ingress-basic-auth
          nginx.ingress.kubernetes.io/auth-realm: Authentication Required
      alertmanagerSpec:
        logLevel: debug
        alertmanagerConfigSelector:
          matchLabels:
            manager: default
      config:
        route:
          receiver: noop
          routes:
            - receiver: noop
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: slack
              continue: false
              group_by: ["alertname"]
              group_wait: 10m
              group_interval: 30m
              repeat_interval: 72h
              matchers:
                - alertname = "ImageCriticalVulnerabilities"
            - receiver: slack
              continue: true
              group_by: ["..."]
              group_wait: 1s
              group_interval: 1s
              repeat_interval: 8h
        receivers:
          - name: noop
          - name: slack
            slack_configs:
              - channel: ""
                send_resolved: true
                username: Alertmanager
                title: |
                  {{- if (index .Alerts 0).Annotations.summary -}}
                    {{ (index .Alerts 0).Annotations.summary }}
                  {{- else if .CommonLabels.alertname -}}
                    {{ .CommonLabels.alertname }}
                  {{- else -}}
                    Alert
                  {{- end -}}
                  {{- " " -}}
                  {{- if eq .CommonLabels.severity "critical" -}}
                    🔥🚽
                  {{- else if eq .CommonLabels.severity "error" -}}
                    ❌
                  {{- else if eq .CommonLabels.severity "warning" -}}
                    ⚠️
                  {{- else if eq .CommonLabels.severity "info" -}}
                    ℹ️
                  {{- else -}}
                    ❕
                  {{- end }}
                pretext: ""
                text: |
                  {{ range .Alerts }}
                    {{- if .Annotations.description -}}
                      > _{{ .Annotations.description }}_
                      {{- "\n" -}}
                    {{- end -}}
                    • alertname: `{{ .Labels.alertname }}`
                    {{- "\n" -}}
                    {{- if .Labels -}}
                      {{- range .Labels.SortedPairs -}}
                        {{- if not (or (eq .Name "alertname") (eq .Name "dashboard_url") (eq .Name "severity") (eq .Name "prometheus") (eq .Name "integration")) -}}
                          • {{ .Name }}: `{{ .Value }}`
                          {{- "\n" -}}
                        {{- end -}}
                      {{- end -}}
                    {{- end -}}
                  {{ end }}
                icon_url: https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Prometheus_software_logo.svg/256px-Prometheus_software_logo.svg.png
                actions:
                  - type: button
                    text: "Query :mag:"
                    url: "{{ (index .Alerts 0).GeneratorURL }}"
                  - type: button
                    text: "Dashboard :chart_with_upwards_trend:"
                    url: "{{ (index .Alerts 0).Labels.dashboard_url }}"
                  - type: button
                    text: "Silence :no_bell:"
                    url: |
                      {{ .ExternalURL }}/#/silences/new?filter=%7B
                      {{- range .Alerts -}}
                        {{- range .Labels.SortedPairs -}}
                            {{- if (and (ne .Name "alertname") (ne .Name "dashboard_url")) -}}
                                {{- .Name }}%3D%22{{- .Value -}}%22%2C%20
                            {{- end -}}
                        {{- end -}}
                        alertname%3D%22{{- .Labels.alertname -}}%22%7D
                      {{- end -}}
    grafana:
      sidecar:
        datasources:
          url: http://monitoring-thanos-query-frontend.monitoring:9090
          defaultDatasourceScrapeInterval: 5s
      service:
        type: NodePort
      serviceMonitor:
        scrapeTimeout: 10s
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
      persistence:
        enabled: true
        type: pvc
        size: 10Gi
    prometheus:
      enabled: true
      service:
        type: NodePort
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
          nginx.ingress.kubernetes.io/auth-type: basic
          nginx.ingress.kubernetes.io/auth-secret: ingress-basic-auth
          nginx.ingress.kubernetes.io/auth-realm: Authentication Required
      resources:
        requests:
          cpu: 250m
          memory: 1250Mi
      thanosService:
        enabled: true
      prometheusSpec:
        thanos:
          objectStorageConfig:
            existingSecret:
              key: objstore.yml
              name: thanos-objstore
        scrapeInterval: 30s
        scrapeTimeout: 10s
        # Allow Prometheus to discover all PodMonitors/ServiceMonitors within
        # its namespace, without applying label filtering.
        podMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: standard
              resources:
                requests:
                  storage: 100Gi
        additionalScrapeConfigs:
          # Configure scraping of pods with 'prometheus.io/scrape' annotation 'true'.
          # 'prometheus.io/port' and 'prometheus.io/path' may be customized.
          - job_name: kubernetes-pods
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_pod_annotation_prometheus_io_scrape
                action: keep
                regex: true
              - source_labels:
                  - __meta_kubernetes_pod_annotation_prometheus_io_path
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels:
                  - __address__
                  - __meta_kubernetes_pod_annotation_prometheus_io_port
                action: replace
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $1:$2
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels:
                  - __meta_kubernetes_namespace
                action: replace
                target_label: kubernetes_namespace
              - source_labels:
                  - __meta_kubernetes_pod_name
                action: replace
                target_label: kubernetes_pod_name
              - source_labels:
                  - __meta_kubernetes_pod_label_app
                action: replace
                target_label: fdk_service
          # Use blackbox to gather metrics regarding ingresses.
          # Source: https://github.com/prometheus/prometheus/blob/c1b669bf9b0b1286ece53c977262089119783105/documentation/examples/prometheus-kubernetes.yml#L224-L260
          - job_name: kubernetes-ingresses
            scrape_interval: 1m
            metrics_path: /probe
            params:
              module:
                - http_2xx
            kubernetes_sd_configs:
              - role: ingress
            relabel_configs:
              # Example relabel to probe only some ingresses that have "example.io/should_be_probed = true" annotation
              #  - source_labels: [__meta_kubernetes_ingress_annotation_example_io_should_be_probed]
              #    action: keep
              #    regex: true
              - source_labels:
                  - __meta_kubernetes_ingress_scheme
                  - __address__
                  - __meta_kubernetes_ingress_path
                # Modfied from (.+);(.+);(.+) to remove trailing *
                regex: (.+);(.+);(.+?)\*?$
                replacement: ${1}://${2}${3}
                target_label: __param_target
              - target_label: __address__
                replacement: monitoring-blackbox-exporter-prometheus-blackbox-exporter.monitoring.svc.cluster.local:9115
              - source_labels:
                  - __param_target
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_ingress_label_(.+)
              - source_labels:
                  - __meta_kubernetes_namespace
                target_label: namespace
              - source_labels:
                  - __meta_kubernetes_ingress_name
                target_label: ingress
